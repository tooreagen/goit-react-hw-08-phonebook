{"version":3,"file":"static/js/854.59cc7837.chunk.js","mappings":"mNAEaA,E,QAAeC,GAAAA,KAAH,+F,iDCsDzB,EAjDqB,WACnB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAcF,EAAAA,EAAAA,MACdG,GAAoBH,EAAAA,EAAAA,MAEpBI,GAAWC,EAAAA,EAAAA,MAwBjB,OAvBcC,EAAAA,EAAAA,IAAYC,EAAAA,KAoBxBC,EAAAA,GAAAA,MAAY,mBAIZ,UAACX,EAAD,CAAcY,SAtBK,SAAAC,GACnB,MAA8CA,EAAIC,OAA1CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAC/BL,EAAIM,iBACAF,EAASG,QAAUF,EAAWE,OAIlCb,GACEc,EAAAA,EAAAA,IAAa,CACXN,KAAMA,EAAKK,MACXJ,MAAOA,EAAMI,MACbH,SAAUA,EAASG,SAGvBP,EAAIC,OAAOQ,SAVTX,EAAAA,GAAAA,MAAA,wBAWH,EAOC,WACE,kBAAOY,QAASrB,EAAhB,yBACA,kBAAOsB,KAAK,OAAOT,KAAK,OAAOU,GAAIvB,KAEnC,kBAAOqB,QAASnB,EAAhB,sBACA,kBAAOoB,KAAK,QAAQT,KAAK,QAAQU,GAAIrB,KAErC,kBAAOmB,QAASlB,EAAhB,wBACA,kBAAOmB,KAAK,WAAWT,KAAK,WAAWU,GAAIpB,KAE3C,kBAAOkB,QAASjB,EAAhB,+BACA,kBAAOkB,KAAK,WAAWT,KAAK,aAAaU,GAAInB,KAE7C,mBAAQkB,KAAK,SAAb,wBAGL,EChDD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C,wDCHM,IAkBIrB,EAAS,eAACuB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/RegisterForm/RegisterFormStyled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormRegister = styled.form`\n    display: flex;\n    flex-direction: column;\n    padding: 30px 0;\n`;\n","import { nanoid } from 'nanoid';\nimport { FormRegister } from './RegisterFormStyled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { registerUser } from 'redux/auth/auth-operations';\nimport { selectError } from 'redux/auth/auth-selectors';\n\nconst RegisterForm = () => {\n  const inputNameID = nanoid();\n  const inputEmailID = nanoid();\n  const inputPassID = nanoid();\n  const inputPassRetypeID = nanoid();\n\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleSubmit = evt => {\n    const { name, email, password, passRetype } = evt.target;\n    evt.preventDefault();\n    if (password.value !== passRetype.value) {\n      toast.error(`Passwords don't match`);\n      return;\n    }\n    dispatch(\n      registerUser({\n        name: name.value,\n        email: email.value,\n        password: password.value,\n      })\n    );\n    evt.target.reset();\n  };\n\n  if (error) {\n    toast.error('Register error');\n  }\n\n  return (\n    <FormRegister onSubmit={handleSubmit}>\n      <label htmlFor={inputNameID}>User name:</label>\n      <input type=\"text\" name=\"name\" id={inputNameID} />\n\n      <label htmlFor={inputEmailID}>E-mail:</label>\n      <input type=\"email\" name=\"email\" id={inputEmailID} />\n\n      <label htmlFor={inputPassID}>Password:</label>\n      <input type=\"password\" name=\"password\" id={inputPassID} />\n\n      <label htmlFor={inputPassRetypeID}>Retype password:</label>\n      <input type=\"password\" name=\"passRetype\" id={inputPassRetypeID} />\n\n      <button type=\"submit\">Register</button>\n    </FormRegister>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormRegister","styled","inputNameID","nanoid","inputEmailID","inputPassID","inputPassRetypeID","dispatch","useDispatch","useSelector","selectError","toast","onSubmit","evt","target","name","email","password","passRetype","preventDefault","value","registerUser","reset","htmlFor","type","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}