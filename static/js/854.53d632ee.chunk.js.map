{"version":3,"file":"static/js/854.53d632ee.chunk.js","mappings":"yMAEaA,E,QAAeC,GAAAA,KAAH,uG,qEC6EzB,EAxEqB,WAEnB,IAAMC,GAAWC,EAAAA,EAAAA,MAwBjB,OAvBcC,EAAAA,EAAAA,IAAYC,EAAAA,KAoBxBC,EAAAA,GAAAA,MAAY,mBAIZ,UAACN,EAAD,CAAcO,SAtBK,SAAAC,GACnB,MAA8CA,EAAIC,OAA1CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,WAC/BL,EAAIM,iBACAF,EAASG,QAAUF,EAAWE,OAIlCb,GACEc,EAAAA,EAAAA,IAAa,CACXN,KAAMA,EAAKK,MACXJ,MAAOA,EAAMI,MACbH,SAAUA,EAASG,SAGvBP,EAAIC,OAAOQ,SAVTX,EAAAA,GAAAA,MAAA,wBAWH,EAOC,WACE,SAACY,EAAA,EAAD,CACER,KAAK,OACLS,KAAK,OACLC,MAAM,YACNC,MAAM,UACNC,KAAK,QACLC,SAAO,EACPC,UAAQ,KAEV,SAACN,EAAA,EAAD,CACER,KAAK,QACLS,KAAK,QACLC,MAAM,SACNC,MAAM,UACNC,KAAK,QACLC,SAAO,EACPC,UAAQ,KAEV,SAACN,EAAA,EAAD,CACER,KAAK,WACLS,KAAK,WACLC,MAAM,WACNC,MAAM,UACNC,KAAK,QACLC,SAAO,EACPC,UAAQ,KAEV,SAACN,EAAA,EAAD,CACER,KAAK,aACLS,KAAK,WACLC,MAAM,kBACNC,MAAM,UACNC,KAAK,QACLC,SAAO,EACPC,UAAQ,KAGV,SAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,QAAQ,YAA9B,wBAKL,ECvED,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C","sources":["components/RegisterForm/RegisterFormStyled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormRegister = styled.form`\n  padding: 30px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;","import { FormRegister } from './RegisterFormStyled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { registerUser } from 'redux/auth/auth-operations';\nimport { selectError } from 'redux/auth/auth-selectors';\nimport { Button, TextField } from '@mui/material';\n\nconst RegisterForm = () => {\n\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleSubmit = evt => {\n    const { name, email, password, passRetype } = evt.target;\n    evt.preventDefault();\n    if (password.value !== passRetype.value) {\n      toast.error(`Passwords don't match`);\n      return;\n    }\n    dispatch(\n      registerUser({\n        name: name.value,\n        email: email.value,\n        password: password.value,\n      })\n    );\n    evt.target.reset();\n  };\n\n  if (error) {\n    toast.error('Register error');\n  }\n\n  return (\n    <FormRegister onSubmit={handleSubmit}>\n      <TextField\n        name=\"name\"\n        type=\"text\"\n        label=\"User name\"\n        color=\"primary\"\n        size=\"small\"\n        focused\n        required\n      />\n      <TextField\n        name=\"email\"\n        type=\"email\"\n        label=\"E-mail\"\n        color=\"primary\"\n        size=\"small\"\n        focused\n        required\n      />\n      <TextField\n        name=\"password\"\n        type=\"password\"\n        label=\"Password\"\n        color=\"primary\"\n        size=\"small\"\n        focused\n        required\n      />\n      <TextField\n        name=\"passRetype\"\n        type=\"password\"\n        label=\"Retype password\"\n        color=\"primary\"\n        size=\"small\"\n        focused\n        required\n      />\n\n      <Button type=\"submit\" variant=\"contained\">\n        Register\n      </Button>\n    </FormRegister>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["FormRegister","styled","dispatch","useDispatch","useSelector","selectError","toast","onSubmit","evt","target","name","email","password","passRetype","preventDefault","value","registerUser","reset","TextField","type","label","color","size","focused","required","Button","variant"],"sourceRoot":""}