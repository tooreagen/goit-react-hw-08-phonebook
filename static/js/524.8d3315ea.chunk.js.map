{"version":3,"file":"static/js/524.8d3315ea.chunk.js","mappings":"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","sources":["components/Contacts/ContactsForm/ContactsForm.styled.js","redux/contacts/contacts-selectors.js","components/Contacts/ContactsForm/ContactsForm.jsx","components/Contacts/ContactsListItem/ContactsListItem.styled.js","components/Contacts/ContactsListItem/ContactsListItem.jsx","components/Contacts/ContactsList/ContactsList.styled.js","components/Contacts/ContactsList/ContactsList.jsx","components/Contacts/Filter/Filter.styled.js","components/Contacts/Filter/Filter.jsx","pages/ContactsPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    margin-top: 20px;\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Label = styled.label`\n    margin-bottom: 3px;\n    :not(:first-child) {\n        margin-top: 15px;\n    }\n`;\n\nexport const Input = styled.input`\n    padding: 8px;\n    border-radius: 5px;\n`;\n\nexport const Button = styled.button`\n    margin-top: 15px;\n    padding: 8px;\n    border: none;\n    border-radius: 5px;\n    background-color: #309bff;\n\n\n    :hover {\n        background-color: #5eb1ff;\n        box-shadow: 0px 6px 9px 0px #adadad;\n    }\n`;","export const selectContactsArray = state => state.contactsState.contacts.items;\nexport const selectFilterString = state => state.filterState.filter;\nexport const selectFetchError = state => state.contactsState.contacts.error;\nexport const selectIsLoadingState = state => state.contactsState.contacts.isLoading;\n","import { nanoid } from 'nanoid';\nimport { Form, Label, Input, Button } from './ContactsForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsArray } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nexport function ContactsForm() {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const contacts = useSelector(selectContactsArray);\n  const dispatch = useDispatch();\n\n  const handleContactAdd = evt => {\n    const { name, number } = evt.target;\n    evt.preventDefault();\n    if (contacts.some(item => item.name === name.value)) {\n      alert(`${name.value} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name: name.value, number: number.value }));\n    }\n    evt.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleContactAdd}>\n      <Label htmlFor={nameInputId}>Name</Label>\n      <Input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Label htmlFor={numberInputId}>Number</Label>\n      <Input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const ListItem = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    :not(:first-child) {\n        margin-top: 8px;\n    }\n`;\n\nexport const Button = styled.button`\n    padding: 8px;\n    border: none;\n    border-radius: 5px;\n    background-color: #ff2f2f;\n\n\n    :hover {\n        background-color: #ff5e5e;\n        box-shadow: 0px 6px 9px 0px #adadad;\n    }\n`;","import { ListItem, Button } from './ContactsListItem.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nexport function ContactsListItem(props) {\n  const { id, name, number } = props.item;\n  const dispatch = useDispatch();\n\n  const handleContactDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ListItem>\n      {`${name}: ${number}`}{' '}\n      <Button onClick={handleContactDelete}>Delete</Button>\n    </ListItem>\n  );\n}\n\nContactsListItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  width: 95%;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { ContactsListItem } from 'components/Contacts/ContactsListItem/ContactsListItem';\nimport { List } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectContactsArray, selectFilterString } from 'redux/contacts/contacts-selectors';\n\nexport function ContactsList() {\n  const contacts = useSelector(selectContactsArray);\n  const filterString = useSelector(selectFilterString);\n\n  return (\n    <List>\n      {contacts\n        .filter(item => item.name.toLowerCase().includes(filterString))\n        .map(item => {\n          return <ContactsListItem key={item.id} item={item} />;\n        })}\n    </List>\n  );\n}","import styled from \"styled-components\";\n\nexport const FilterWrap = styled.div`\n    margin-top: 15px;\n    margin-bottom: 15px;\n`;\n\nexport const P = styled.p`\n    margin-bottom: 3px;\n`;\n\nexport const Input = styled.input`\n    padding: 8px;\n    width: 100%;\n    border-radius: 5px;\n`;","import { FilterWrap, P, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filter-slice';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n\n  const handleContactFind = evt => {\n    dispatch(filterContacts(evt.currentTarget.value));\n  };\n\n  return (\n    <FilterWrap>\n      <P>Find contacts by name</P>\n      <Input type=\"text\" onChange={handleContactFind} />\n    </FilterWrap>\n  );\n}\n","import { ContactsForm } from 'components/Contacts/ContactsForm/ContactsForm';\nimport { ContactsList } from 'components/Contacts/ContactsList/ContactsList';\nimport { Filter } from 'components/Contacts/Filter/Filter';\nimport { Loading } from 'components/Loading/Loading';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { selectFetchError, selectIsLoadingState } from 'redux/contacts/contacts-selectors';\nimport { toast } from 'react-toastify';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoadingState);\n  const dispatch = useDispatch();\n  const error = useSelector(selectFetchError);\n  \n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    toast.error(error);\n  }, [error]);\n    \n  return (\n    <main>\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading ? <Loading /> : <ContactsList />}\n    </main>\n  );\n};\nexport default ContactsPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Form","styled","Label","Input","Button","selectContactsArray","state","contactsState","contacts","items","selectFilterString","filterState","filter","selectFetchError","error","selectIsLoadingState","isLoading","ContactsForm","nameInputId","nanoid","numberInputId","useSelector","dispatch","useDispatch","onSubmit","evt","target","name","number","preventDefault","some","item","value","alert","addContact","reset","htmlFor","id","type","pattern","title","required","ListItem","ContactsListItem","props","onClick","deleteContact","List","ContactsList","filterString","toLowerCase","includes","map","FilterWrap","P","Filter","onChange","filterContacts","currentTarget","useEffect","fetchContacts","toast","Loading","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}