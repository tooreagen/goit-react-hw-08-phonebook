{"version":3,"file":"static/js/961.3385bd44.chunk.js","mappings":"uOAEaA,E,QAAYC,GAAAA,KAAH,yF,6BCuCtB,EAlCkB,WAChB,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAcD,EAAAA,EAAAA,MACdE,GAAWC,EAAAA,EAAAA,MAkBjB,OAjBcC,EAAAA,EAAAA,IAAYC,EAAAA,KAcxBC,EAAAA,GAAAA,MAAY,gCAIZ,UAACT,EAAD,CAAWU,SAhBQ,SAAAC,GACnB,MAA4BA,EAAIC,OAAxBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACfH,EAAII,iBACJV,GACEW,EAAAA,EAAAA,IAAU,CACRH,MAAOA,EAAMI,MACbH,SAAUA,EAASG,QAGxB,EAOC,WACE,kBAAOC,QAAShB,EAAhB,qBACA,kBAAOiB,KAAK,QAAQC,KAAK,QAAQC,GAAInB,KAErC,kBAAOgB,QAASd,EAAhB,wBACA,kBAAOe,KAAK,WAAWC,KAAK,WAAWC,GAAIjB,KAE3C,mBAAQe,KAAK,SAAb,qBAGL,ECjCD,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C,wDCHM,IAkBIhB,EAAS,eAACmB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/LoginForm/LoginFormStyled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormLogin = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 30px 0;\n`;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginUser } from 'redux/auth/auth-operations';\nimport { FormLogin } from './LoginFormStyled';\nimport { selectError } from 'redux/auth/auth-selectors';\nimport { toast } from 'react-toastify';\n\nconst LoginForm = () => {\n  const inputEmailID = nanoid();\n  const inputPassID = nanoid();\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleSubmit = evt => {\n    const { email, password } = evt.target;\n    evt.preventDefault();\n    dispatch(\n      loginUser({\n        email: email.value,\n        password: password.value,\n      })\n    );\n  };\n\n  if (error) {\n    toast.error('Incorrect login or password');\n  }\n\n  return (\n    <FormLogin onSubmit={handleSubmit}>\n      <label htmlFor={inputEmailID}>Email:</label>\n      <input type=\"email\" name=\"email\" id={inputEmailID} />\n\n      <label htmlFor={inputPassID}>Password:</label>\n      <input type=\"password\" name=\"password\" id={inputPassID} />\n\n      <button type=\"submit\">Login</button>\n    </FormLogin>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["FormLogin","styled","inputEmailID","nanoid","inputPassID","dispatch","useDispatch","useSelector","selectError","toast","onSubmit","evt","target","email","password","preventDefault","loginUser","value","htmlFor","type","name","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}